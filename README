      ____    __  __   ______   ____           ____     _____      
     /\  _ \ /\ \/\ \ /\__  _\ /\  _ \        /\  _ \  /\  __ \
     \ \ \ \_\ \ \/ / \/_/\ \/ \ \ \ \ \      \ \ \ \ \\ \ \/\ \   
      \/_\__ \\ \   <    \ \ \  \ \  __/_______\ \  _ < \ \ \ \ \  
        /\ \ \ \ \ \\ \   \_\ \__\ \ \//\______\\ \ \ \ \\ \ \_\ \ 
        \  \____\ \_\ \_\ /\_____\\ \_\\/______/ \ \____/ \ \_____\
         \/_____/\/_/\/_/ \/_____/ \/_/           \/___/   \/_____/


Names: Kathleen Kusworo, Gary Qian, Sarah Sukardi, Matthew Tan
Course: Intermediate Programming (AS.600.120)
Date: 5/01/2015 (First Deadline), 5/08/2015 (Final Deadline)
Assignment: Final Project-- Skip-Bo
JHEDs: kkuswor1, gqian1, ssukard1, mtan13
Email: (JHED)@jhu.edu

-------------------------------RUNNING THE GAME----------------------------
HOW TO RUN THE GAME:
1. Type in "make". Run the executable file produced by typing
   "./skipbo".
2. Begin playing. See instructions below on how to play Skip-Bo.

HOW TO TEST THE GAME:
1. To test Player, type in "make PlayerTest". 
2. To test Deck, type in "make DeckTest".
3. To test the Display, type in "make DisplayTest".
4. To test the Game, type in "make GameTest".

HOW TO CLEAN ALL EXECUTABLES AND INTERMEDIARY FILES:
1. Type in "make clean".


-------------------------------PLAYING THE GAME----------------------------
HOW TO PLAY SKIP-BO:

HOW TO PLAY THIS VERSION OF SKIP-BO:
1. Run the executable file (as dictated above).
2. Enter in names as advised.
3. To make a move in Skip-Bo, you are moving cards from one pile to another.
   Therefore, one moves a card from a certain pile to another by calling its
   associated letter: 's' for stock, 'b' for build, 'h' for hand, and 'd' for 
   discard. 
4. A move consists of four characters: the first for the pile that is being
   moved from, the second for the index of this particular pile, the third 
   for the pile that is being moved to, and the fourth for the index of that
   particular pile.
5. In this version of skip-bo, cards are referred to by their indexes, not by
   their values themselves. The index will be written right above the value 
   of the card.
6. Example: To move the third card in hand to the fifth discard pile, type 
   h3 d5, or h3d5. The move will work with or without spaces.
7. The game will automatically switch players once a turn is done.
8. Keep playing until the game declares a winner!


--------------------------------FILES INCLUDED-----------------------------
CARD MANEUVERING
1. Deck.h          - Includes header files for Deck and its derivatives
2. Deck.cpp	   - Deck superclass
3. Build.cpp	   - Subclass of deck: build piles
4. Hand.cpp	   - Subclass of deck: a player's hand 
5. Draw.cpp	   - Subclass of deck: the communal draw pile
6. Discard.cpp	   - Subclass of deck: the individual discard piles
7. Stock.cpp	   - Subclass of deck: the stock which each player must deplete

PLAYER CHARACTERISTICS
1. Player.h	   - Includes header files for Player and its derivatives 
2. Player.cpp	   - Player abstract class
3. AI.cpp	   - Subclass of Player: AI 
4. HumanPlayer.cpp - Subclass of Player: A human player

GAME OPERATIONS
1. Game.h	   - Includes header files for the Game
2. Game.cpp	   - The game itself
3. Move.h	   - Includes header files for Move
4. Move.cpp	   - The move file itself (with associated methods)
5. Display.h	   - Includes header files for Display
6. Display.cpp	   - The display file itself (with associated methods)
7. SkipBoMain.cpp  - The main method through which the game is run

TEST FILES
1. PlayerTest.cpp  - Tests Player and derived classes
2. DeckTest.cpp	   - Tests Deck and derived classes
3. DisplayTest.cpp - Tests the Display
4. GameTest.cpp	   - Tests the Game

MISCELLANEOUS
1. Makefile	   - Contains instructions for easy compiling
2. README	   - This file (documentation)

