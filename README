      ____    __  __   ______   ____           ____     _____      
     /\  _ \ /\ \/\ \ /\__  _\ /\  _ \        /\  _ \  /\  __ \
     \ \ \ \_\ \ \/ / \/_/\ \/ \ \ \ \ \      \ \ \ \ \\ \ \/\ \   
      \/_\__ \\ \   <    \ \ \  \ \  __/_______\ \  _ < \ \ \ \ \  
        /\ \ \ \ \ \\ \   \_\ \__\ \ \//\______\\ \ \ \ \\ \ \_\ \ 
        \  \____\ \_\ \_\ /\_____\\ \_\\/______/ \ \____/ \ \_____\
         \/_____/\/_/\/_/ \/_____/ \/_/           \/___/   \/_____/


Names: Kathleen Kusworo, Gary Qian, Sarah Sukardi, Matthew Tan
Course: Intermediate Programming (AS.600.120)
Date: 5/01/2015 (First Deadline), 5/08/2015 (Final Deadline)
Assignment: Final Project-- Skip-Bo
JHEDs: kkuswor1, gqian1, ssukard1, mtan13
Email: (JHED)@jhu.edu

---------------------------EXTRA CREDIT FEATURES---------------------------
1) Undo-ing and redo-ing moves
   Done by saving the state of the game for every valid move. This method 
   is chosen because it is the most robust. We tested the speed of the 
   game using this implementation and didn't encounter any lag.
   Simply type in 'undo' or 'redo' any time during gameplay.

2) AI Implementation
   Capable of making strategic moves. 

-------------------------------RUNNING THE GAME----------------------------
HOW TO RUN THE GAME:
1. Type in "make". Run the executable file produced by typing
   "./skipbo".
2. Begin playing. See instructions below on how to play Skip-Bo.

HOW TO TEST THE GAME:
1. To test all tests, type in "make test".
2. To test the speed of undo/redo, type in "make speed".

HOW TO CLEAN ALL EXECUTABLES AND INTERMEDIARY FILES:
1. Type in "make clean".


-------------------------------PLAYING THE GAME----------------------------
HOW TO PLAY SKIP-BO:
1. The objective of Skip-Bo is to be the first player to play all the cards
   in your stock pile.
2. To begin, the deck is shuffled. Then players are dealt stock cards-- if 
   there are more than 4 players, each player is dealt 20 cards. Elsewise,
   each player is dealt 30 cards.
3. To set up, all cards left over after cards have been dealt are placed into
   a "draw pile." There are also 4 "build piles" (with no cards in them yet)
   shared between all the players. Each player has a stock pile (the 20 or 
   30 cards dealt) and 4 discard piles (with no cards in them yet).
4. A player can only see the card at the top of their "stock" pile. They will
   draw a hand of 5 from the draw pile. They then have the option of moving
   cards onto the build pile consecutively from 1 to 12. A skip-bo card counts
   as a wild card.
5. Once a player cannot put anymore cards into the build pile from the stock
   pile or their hand, they must place a card into the discard pile. Their 
   turn is then over.
6. This is repeated, going in a circle, until one person's stock pile is 
   completely depleted.

HOW TO PLAY THIS VERSION OF SKIP-BO:
1. Run the executable file (as dictated above).
2. Enter in names as advised.
3. To make a move in Skip-Bo, you are moving cards from one pile to another.
   Therefore, one moves a card from a certain pile to another by calling its
   associated letter: 's' for stock, 'b' for build, 'h' for hand, and 'd' for 
   discard. 
4. A move consists of four characters: the first for the pile that is being
   moved from, the second for the index of this particular pile, the third 
   for the pile that is being moved to, and the fourth for the index of that
   particular pile.
5. In this version of skip-bo, cards are referred to by their indexes, not by
   their values themselves. The index will be written right above the value 
   of the card.
6. Example: To move the third card in hand to the fifth discard pile, type 
   h3 d5, or h3d5. The move will work with or without spaces. A note is that
   to move from the stock pile, no index should be given, since only the
   top card can be moved onto a build or discard pile.
7. The game will automatically switch players once a turn is done.
8. Keep playing until the game declares a winner!


--------------------------------FILES INCLUDED-----------------------------
CARD MANEUVERING
1. Deck.h          - Includes header files for Deck and its derivatives
2. Deck.cpp	   - Deck superclass
3. Build.cpp	   - Subclass of deck: build piles
4. Hand.cpp	   - Subclass of deck: a player's hand 
5. Draw.cpp	   - Subclass of deck: the communal draw pile
6. Discard.cpp	   - Subclass of deck: the individual discard piles
7. Stock.cpp	   - Subclass of deck: the stock which each player must deplete

PLAYER CHARACTERISTICS
1. Player.h	   - Includes header files for Player and its derivatives 
2. Player.cpp	   - Player abstract class
3. AI.cpp	   - Subclass of Player: AI 
4. HumanPlayer.cpp - Subclass of Player: A human player

GAME OPERATIONS
1. Game.h	   - Includes header files for the Game
2. Game.cpp	   - The game itself
3. Move.h	   - Includes header files for Move
4. Move.cpp	   - The move file itself (with associated methods)
5. Display.h	   - Includes header files for Display
6. Display.cpp	   - The display file itself (with associated methods)
7. SkipBoMain.cpp  - The main method through which the game is run

TEST FILES
1. PlayerTest.cpp  - Tests Player and derived classes
2. DeckTest.cpp	   - Tests Deck and derived classes
3. DisplayTest.cpp - Tests the Display
4. GameTest.cpp	   - Tests the Game

MISCELLANEOUS
1. Makefile	   - Contains instructions for easy compiling
2. README	   - This file (documentation)
3. Exception.h	   - Exception header file
4. files w/ "test" - Used in test functions
5. testGen.cpp 	   - Generates a text file for testing undo/redo 
6. sample_output   - A sample output of the program run

-------------------------ADDITIONAL NOTES-------------------------------
1. Several ASCII extended characters are used. If run on a computer which
   does not support ASCII-extended characters, weird artifacts might show 
   up (Though the game itself will run without incident)

2. The pause when an AI makes a move is intentional - it is not a lag.
   Without it, the screen would change so quickly that the user can hardly 
   observe the AI's move. 